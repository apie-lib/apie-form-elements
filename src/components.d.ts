/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TypeDefinition } from "./utils/utils";
export { TypeDefinition } from "./utils/utils";
export namespace Components {
    interface ApieFormGroup {
        "debugMode": boolean;
        "name": string;
        "validationErrors": Record<string, any>;
        "value"?: Record<string, any>;
    }
    interface ApieFormHashmap {
        "label": string;
        "name": string;
        "replaceString": string;
        "templateId": string;
        "value": Record<string|number, any>;
    }
    interface ApieFormList {
        "label": string;
        "name": string;
        "replaceString": string;
        "templateId": string;
        "value": Array<any>;
    }
    interface ApieFormSelect {
        "name": string;
        "options": Record<string, TypeDefinition>;
        "selectChoice"?: string;
        "validationErrors": Record<string, any>;
        "value": any;
    }
    interface ApieListenOtherEvent {
        "checked": boolean;
        "eventName": string;
        "name": string;
        "useChecked": boolean;
        "value": any;
    }
    interface ApieScalarElement {
        "invalid": boolean;
        "invalidText"?: string;
        "name": string;
        "useChecked": boolean;
        "value": any;
    }
    interface ApieScript {
    }
    interface ApieValidationError {
    }
}
export interface ApieFormGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApieFormGroupElement;
}
export interface ApieFormHashmapCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApieFormHashmapElement;
}
export interface ApieFormListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApieFormListElement;
}
export interface ApieFormSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApieFormSelectElement;
}
export interface ApieListenOtherEventCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLApieListenOtherEventElement;
}
declare global {
    interface HTMLApieFormGroupElementEventMap {
        "input": Record<string, any>;
    }
    interface HTMLApieFormGroupElement extends Components.ApieFormGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApieFormGroupElementEventMap>(type: K, listener: (this: HTMLApieFormGroupElement, ev: ApieFormGroupCustomEvent<HTMLApieFormGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApieFormGroupElementEventMap>(type: K, listener: (this: HTMLApieFormGroupElement, ev: ApieFormGroupCustomEvent<HTMLApieFormGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApieFormGroupElement: {
        prototype: HTMLApieFormGroupElement;
        new (): HTMLApieFormGroupElement;
    };
    interface HTMLApieFormHashmapElementEventMap {
        "input": Record<string|number, any>;
    }
    interface HTMLApieFormHashmapElement extends Components.ApieFormHashmap, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApieFormHashmapElementEventMap>(type: K, listener: (this: HTMLApieFormHashmapElement, ev: ApieFormHashmapCustomEvent<HTMLApieFormHashmapElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApieFormHashmapElementEventMap>(type: K, listener: (this: HTMLApieFormHashmapElement, ev: ApieFormHashmapCustomEvent<HTMLApieFormHashmapElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApieFormHashmapElement: {
        prototype: HTMLApieFormHashmapElement;
        new (): HTMLApieFormHashmapElement;
    };
    interface HTMLApieFormListElementEventMap {
        "input": any[];
    }
    interface HTMLApieFormListElement extends Components.ApieFormList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApieFormListElementEventMap>(type: K, listener: (this: HTMLApieFormListElement, ev: ApieFormListCustomEvent<HTMLApieFormListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApieFormListElementEventMap>(type: K, listener: (this: HTMLApieFormListElement, ev: ApieFormListCustomEvent<HTMLApieFormListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApieFormListElement: {
        prototype: HTMLApieFormListElement;
        new (): HTMLApieFormListElement;
    };
    interface HTMLApieFormSelectElementEventMap {
        "input": any[];
    }
    interface HTMLApieFormSelectElement extends Components.ApieFormSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApieFormSelectElementEventMap>(type: K, listener: (this: HTMLApieFormSelectElement, ev: ApieFormSelectCustomEvent<HTMLApieFormSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApieFormSelectElementEventMap>(type: K, listener: (this: HTMLApieFormSelectElement, ev: ApieFormSelectCustomEvent<HTMLApieFormSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApieFormSelectElement: {
        prototype: HTMLApieFormSelectElement;
        new (): HTMLApieFormSelectElement;
    };
    interface HTMLApieListenOtherEventElementEventMap {
        "input": any;
    }
    interface HTMLApieListenOtherEventElement extends Components.ApieListenOtherEvent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLApieListenOtherEventElementEventMap>(type: K, listener: (this: HTMLApieListenOtherEventElement, ev: ApieListenOtherEventCustomEvent<HTMLApieListenOtherEventElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLApieListenOtherEventElementEventMap>(type: K, listener: (this: HTMLApieListenOtherEventElement, ev: ApieListenOtherEventCustomEvent<HTMLApieListenOtherEventElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLApieListenOtherEventElement: {
        prototype: HTMLApieListenOtherEventElement;
        new (): HTMLApieListenOtherEventElement;
    };
    interface HTMLApieScalarElementElement extends Components.ApieScalarElement, HTMLStencilElement {
    }
    var HTMLApieScalarElementElement: {
        prototype: HTMLApieScalarElementElement;
        new (): HTMLApieScalarElementElement;
    };
    interface HTMLApieScriptElement extends Components.ApieScript, HTMLStencilElement {
    }
    var HTMLApieScriptElement: {
        prototype: HTMLApieScriptElement;
        new (): HTMLApieScriptElement;
    };
    interface HTMLApieValidationErrorElement extends Components.ApieValidationError, HTMLStencilElement {
    }
    var HTMLApieValidationErrorElement: {
        prototype: HTMLApieValidationErrorElement;
        new (): HTMLApieValidationErrorElement;
    };
    interface HTMLElementTagNameMap {
        "apie-form-group": HTMLApieFormGroupElement;
        "apie-form-hashmap": HTMLApieFormHashmapElement;
        "apie-form-list": HTMLApieFormListElement;
        "apie-form-select": HTMLApieFormSelectElement;
        "apie-listen-other-event": HTMLApieListenOtherEventElement;
        "apie-scalar-element": HTMLApieScalarElementElement;
        "apie-script": HTMLApieScriptElement;
        "apie-validation-error": HTMLApieValidationErrorElement;
    }
}
declare namespace LocalJSX {
    interface ApieFormGroup {
        "debugMode"?: boolean;
        "name"?: string;
        "onInput"?: (event: ApieFormGroupCustomEvent<Record<string, any>>) => void;
        "validationErrors"?: Record<string, any>;
        "value"?: Record<string, any>;
    }
    interface ApieFormHashmap {
        "label"?: string;
        "name"?: string;
        "onInput"?: (event: ApieFormHashmapCustomEvent<Record<string|number, any>>) => void;
        "replaceString"?: string;
        "templateId"?: string;
        "value"?: Record<string|number, any>;
    }
    interface ApieFormList {
        "label"?: string;
        "name"?: string;
        "onInput"?: (event: ApieFormListCustomEvent<any[]>) => void;
        "replaceString"?: string;
        "templateId"?: string;
        "value"?: Array<any>;
    }
    interface ApieFormSelect {
        "name"?: string;
        "onInput"?: (event: ApieFormSelectCustomEvent<any[]>) => void;
        "options"?: Record<string, TypeDefinition>;
        "selectChoice"?: string;
        "validationErrors"?: Record<string, any>;
        "value"?: any;
    }
    interface ApieListenOtherEvent {
        "checked"?: boolean;
        "eventName"?: string;
        "name"?: string;
        "onInput"?: (event: ApieListenOtherEventCustomEvent<any>) => void;
        "useChecked"?: boolean;
        "value"?: any;
    }
    interface ApieScalarElement {
        "invalid"?: boolean;
        "invalidText"?: string;
        "name"?: string;
        "useChecked"?: boolean;
        "value"?: any;
    }
    interface ApieScript {
    }
    interface ApieValidationError {
    }
    interface IntrinsicElements {
        "apie-form-group": ApieFormGroup;
        "apie-form-hashmap": ApieFormHashmap;
        "apie-form-list": ApieFormList;
        "apie-form-select": ApieFormSelect;
        "apie-listen-other-event": ApieListenOtherEvent;
        "apie-scalar-element": ApieScalarElement;
        "apie-script": ApieScript;
        "apie-validation-error": ApieValidationError;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "apie-form-group": LocalJSX.ApieFormGroup & JSXBase.HTMLAttributes<HTMLApieFormGroupElement>;
            "apie-form-hashmap": LocalJSX.ApieFormHashmap & JSXBase.HTMLAttributes<HTMLApieFormHashmapElement>;
            "apie-form-list": LocalJSX.ApieFormList & JSXBase.HTMLAttributes<HTMLApieFormListElement>;
            "apie-form-select": LocalJSX.ApieFormSelect & JSXBase.HTMLAttributes<HTMLApieFormSelectElement>;
            "apie-listen-other-event": LocalJSX.ApieListenOtherEvent & JSXBase.HTMLAttributes<HTMLApieListenOtherEventElement>;
            "apie-scalar-element": LocalJSX.ApieScalarElement & JSXBase.HTMLAttributes<HTMLApieScalarElementElement>;
            "apie-script": LocalJSX.ApieScript & JSXBase.HTMLAttributes<HTMLApieScriptElement>;
            "apie-validation-error": LocalJSX.ApieValidationError & JSXBase.HTMLAttributes<HTMLApieValidationErrorElement>;
        }
    }
}
